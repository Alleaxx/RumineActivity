@typeparam T

<style>
    .option-select {
        display: flex;
        justify-content: flex-end;
    }

        .option-select h4 {
            flex: 1;
            margin: 4px 0.5em;
            font-size: 1em;
            text-align: right;
        }

        .option-select select{
            border: 0;
            text-align: right;
        }
        .option-select select:focus-visible{
            outline: none;
        }

        .option-select select option{

        }
</style>

<section class="option-select">
    @if (!string.IsNullOrEmpty(HeaderText))
    {<h4>@HeaderText</h4>}

    <select @bind="Item">
        @for (int i = 0; i < List.Count(); i++)
        {
            <option value="@i">
                @List.ElementAt(i).ToString()
            </option>
        }
    </select>
</section>

@code {
    [Parameter]
    public bool Nullable { get; set; }
    [Parameter]
    public string HeaderText { get; set; }
    [Parameter]
    public IEnumerable<T> List { get; set; }
    [Parameter]
    public T Selected { get; set; }
    [Parameter]
    public EventCallback<T> OnSelectCallback { get; set; }


    private void Set(T select)
    {
        Selected = select;
        OnSelectCallback.InvokeAsync(select);
    }

    private string Item
    {
        get => index.ToString();
        set
        {
            index = int.Parse(value);
            Set(List.ElementAt(index));
        }
    }
    private int index { get; set; } = 0;
}
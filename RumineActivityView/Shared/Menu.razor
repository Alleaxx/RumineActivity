@inherits StatComponent

@* СТИЛИ ЗДЕСЬ ИСКЛЮЧИТЕЛЬНО РАДИ ССЫЛОК *@
<style>
    .menu-list a{
        display: block;
        padding: 5px;
        border-radius: 2px;
        text-decoration: none;
        color: black;
        text-align: left;

        border: 5px solid transparent;
        border-top: 1px solid transparent;
        border-bottom: 1px solid transparent;
    }

        .menu-list a.active {
            border-left: 5px solid var(--selected-color);
            border-right: 5px solid var(--selected-color);
            border-top: 1px solid silver;
            border-bottom: 1px solid silver;
        }
        .menu-list a:hover {
            background-color: gainsboro;
        }

        .menu-list .report-link.selected {
            border-left: 2px solid var(--selected-color);
            border-right: 2px solid var(--selected-color);
            border-top: 1px solid silver;
            border-bottom: 1px solid silver;
        }
</style>

<nav class="menu">
    <ul class="menu-list">
        <li class="menu-list-item">
            <NavLink href="" Match="NavLinkMatch.All" class="menu-list-link">
                О приложении
            </NavLink>
        </li>
        <li class="menu-list-item">
            <NavLink href="lastchanges" Match="NavLinkMatch.All" class="menu-list-link">
                Последние изменения
            </NavLink>
        </li>
    </ul>
    <section>
        <header>
            <img alt="Данные" src="images/activity.svg" />
            <h2 class="menu-list-header">Статистика</h2>
        </header>
        <ul class="menu-list">
            <li class="menu-list-item">
                <NavLink href="create" class="menu-list-link">
                    Создать новый отчет
                </NavLink>
            </li>
            <li>
                <hr />
            </li>
            @foreach (var reportGroup in this.App.ReportsCollection.ActiveReports.GroupBy(r => r.Period).OrderByDescending(r => r.Key.TimeInterval))
            {
                <li>
                    <span class="menu-list-mini-header">@reportGroup.Key.NameCategory</span>
                </li>
                @foreach(var report in reportGroup.OrderBy(r => r.DateRangeAll.From))
                {
                    <li class="menu-list-item report-link @CssIsTrue(IsStatisticsPage(report), "selected", "selectable")" style="display: flex;">
                        <a href="statistics" class="menu-list-link" style="flex: 1" @onclick="() => SelectReport(report)">
                            @report.DateRangeAll.GetName()
                        </a>
                        <a role="button" class="report-link-remove" @onclick="() => RemoveReport(report)">
                            X
                        </a>
                    </li>
                }
            }
        </ul>
    </section>
</nav>

@code{
    [Inject]
    public NavigationManager Navigation { get; set; }

    private string GetRelativeURI()
    {
        return Navigation.Uri.Split("/").LastOrDefault();
    }
    private bool IsStatisticsPage(StatisticsReport report)
    {
        bool res1 = GetRelativeURI() == "statistics";
        bool res2 = report == App.ReportsCollection.SelectedReport;
        return res1 && res2;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        App.ReportsCollection.OnReportsCollectionChanged += report => StateHasChanged();
        App.ReportsCollection.OnReportSelected += report => StateHasChanged();
        Navigation.LocationChanged += (e, a) => StateHasChanged();
    }

    private void ThrowException()
    {
        throw new Exception("Вызвано исключение! Всё ради теста, разумеется");
    }

    private void SelectReport(StatisticsReport report)
    {
        App.ReportsCollection.SelectReport(report);
    }
    private void RemoveReport(StatisticsReport report)
    {
        App.ReportsCollection.RemoveReport(report);
    }
}
@inherits ReportComponent

<section class="data-view">
    <ul class="tabber">
        @foreach(var mode in Modes)
        {
            <li class="@(Mode == mode ? "selected" : "")" @onclick="() => Set(mode)">
                @if (!string.IsNullOrEmpty(mode.Icon)) { <img alt="@mode.Name" src="images/@mode.Icon" /> }
                <span>@mode.Name</span>
            </li>
        }
    </ul>

    <div class="content">
        <style>
            .name {
                font-size: 0.7em;
                max-width: 50px;
                text-wrap: normal;
                color: gray;
            }

            .value {
                font-size: 0.8em;
                max-width: 50px;
            }

            .g-entry:hover {
                color: red;
            }

            svg {
                width: 100%;
                margin: 10px 0;
            }

            .activity-line {
                fill: #ffd8a8;
                stroke: #e3830e;
            }
            .activity-line-graph {
                stroke: orange;
                stroke-width: 2px;
                cursor: pointer;
                z-index: 6;
            }
                .activity-line-graph:hover {
                    stroke-width: 4px;
                }
            .point{
                fill: darkred;
                z-index: 10;
            }
                .help-line{
                stroke: gainsboro;
                stroke-width: 1px;
                cursor: pointer;
            }
            

            .trasparent-rect{
                fill: transparent;
                stroke: transparent;
                cursor: pointer;
            }
            .trasparent-rect:hover{
                fill: whitesmoke;
            }
        </style>

        @if (Mode.Type == DataViewTypes.Gistogramm)
        {
            <svg height="@Options.Height" viewBox="@($"0 0 {Options.Width} {Options.Height}")">
                @foreach (var entry in Gistogramm.Rectangles)
                {
                    <g title="@entry.Entry.ToString()">
                        <title>@entry.Entry.ToString()</title>
                        <rect class="trasparent-rect" x="@entry.Empty.X" y="@entry.Empty.Y" height="@entry.Empty.Height" width="@entry.Empty.Width" />
                        <rect x="@entry.Filled.X" y="@entry.Filled.Y" height="@entry.Filled.Height" width="@entry.Filled.Width" fill="@View.CheckEntry(entry.Entry).Color" stroke="gray" />
                        @if (CheckWriting(entry.Index))
                        {
                            <g>
                                <text class="name" x="@entry.Empty.X" y="@(Options.HeightChart + 20)">
                                    @entry.Entry.Name
                                </text>
                                <text class="value" x="@entry.Empty.X" y="@(Options.HeightChart + 40)">
                                    @entry.Entry.PostsDefault.ToString("#,0")
                                </text>
                            </g>
                        }
                    </g>
                }
            </svg>
        }
        else if (Mode.Type == DataViewTypes.Graphic)
        {
            <svg height="@Options.Height" viewBox="@($"0 0 {Options.Width} {Options.Height}")">
                <line class="help-line" x1="0" x2="@Options.Width" y1="@(Options.HeightChart)" y2="@(Options.HeightChart)"/>
                @foreach (var entry in Graphic.Lines)
                {
            <g title="@entry.Entry.ToString()">
                <title>@entry.Entry.ToString()</title>
                <circle class="point" cx="@entry.Point.X" cy="@entry.Point.Y" r="1"></circle>
                <line class="activity-line-graph" x1="@entry.Line.X1" x2="@entry.Line.X2" y1="@entry.Line.Y1" y2="@entry.Line.Y2" />
                <line class="help-line" x1="@(entry.Line.X1)" x2="@(entry.Line.X1)" y1="@(entry.Line.Y1)" y2="@(Options.HeightChart)" />
                @if (CheckWriting(entry.Index))
                {
                    <g>
                        <text class="name" x="@entry.Line.X1" y="@(Options.HeightChart + 20)">@entry.Entry.Name</text>
                        <text class="value" x="@entry.Line.X1" y="@(Options.HeightChart + 40)">@entry.Entry.PostsDefault.ToString("#,0")</text>
                    </g>
                }
            </g>
                }
            </svg>
        }
        else if (Mode.Type == DataViewTypes.GraphicAdv)
        {
            <svg height="@Options.Height" viewBox="@($"0 0 {Options.Width} {Options.Height}")">
                <line class="help-line" x1="0" x2="@Options.Width" y1="@(Options.HeightChart)" y2="@(Options.HeightChart)" />
                <g>
                    <path class="activity-line" d="@Graphic.GetPathAttribute()" />
                </g>
            </svg>
        }
        else if (Mode.Type == DataViewTypes.Table)
        {
            <ClassicTable Report="Report" />
        }
        else if (Mode.Type == DataViewTypes.Values)
        {
            <TableEntries Report="Report" />
        }
        else
        {
            <p>Что-то</p>
        }

    </div>


</section>


@code {

    [Parameter]
    public DataViewType Mode { get; set; } = new DataViewType(DataViewTypes.Values);
    public DataViewType[] Modes { get; set; } = DataViewType.AllValues;
    private void Set(DataViewType mode)
    {
        Mode = mode;
        ModeChanged.InvokeAsync(mode);
    }
    [Parameter]
    public EventCallback<DataViewType> ModeChanged { get; set; }

    public DiagramSize Options { get; set; } = new DiagramSize();

    public Gistogramm Gistogramm => new Gistogramm(Report, Options);
    public Graphic Graphic => new Graphic(Report, Options);



    public int TextLength { get; set; }
    public double WritingsPer { get; set; }

    private int MaxEntriesForEveryWriting { get; set; } = 14;
    private double EntriesDivider { get; set; } = 10;

    private bool CheckWriting(int entryIndex)
    {
        return (Report.Length < MaxEntriesForEveryWriting) || ((entryIndex % (Report.Length / EntriesDivider)) < 1);
    }

}

@inherits ReportComponent

<section class="data-view">
    <ul class="tabber">
        @foreach(var mode in DataViews)
        {
            <li class="@(Mode == mode ? "selected" : "")" @onclick="() => Set(mode)">
                @if (!string.IsNullOrEmpty(mode.Icon)) { <img alt="@mode.Name" src="images/@mode.Icon" /> }
                <span>@mode.Name</span>
            </li>
        }
    </ul>

    <div class="content">
        @if (Mode.Type == DViewTypes.Gistogramm)
        {
            <svg height="@Options.Height" viewBox="@($"0 0 {Options.Width} {Options.Height}")">
                @foreach (var entry in Gistogramm.Rectangles)
                {
                    <g title="@entry.Entry.ToString()">
                        <title>@entry.Entry.ToString()</title>
                        <rect class="trasparent-rect" x="@entry.Empty.X" y="@entry.Empty.Y" height="@entry.Empty.Height" width="@entry.Empty.Width" />
                        <rect x="@entry.Filled.X" y="@entry.Filled.Y" height="@entry.Filled.Height" width="@entry.Filled.Width" fill="@View.Rules.GetFor(entry.Entry).Color" stroke="gray" />
                        @if (CheckWriting(entry.Index))
                        {
                            <g>
                                <text class="name" x="@entry.Empty.X" y="@(Options.HeightChart + 20)">
                                    @entry.Entry.Name
                                </text>
                                <text class="value" x="@entry.Empty.X" y="@(Options.HeightChart + 40)">
                                    @entry.Entry.PostsWritten.ToString("#,0")
                                </text>
                            </g>
                        }
                    </g>
                }
            </svg>
        }
        else if (Mode.Type == DViewTypes.Graphic)
        {
            <svg height="@Options.Height" viewBox="@($"0 0 {Options.Width} {Options.Height}")">
                <line class="help-line" x1="0" x2="@Options.Width" y1="@(Options.HeightChart)" y2="@(Options.HeightChart)"/>
                @foreach (var entry in Graphic.Lines)
                {
            <g title="@entry.Entry.ToString()">
                <title>@entry.Entry.ToString()</title>
                <circle class="point" cx="@entry.Point.X" cy="@entry.Point.Y" r="1"></circle>
                <line class="activity-line-graph" x1="@entry.Line.X1" x2="@entry.Line.X2" y1="@entry.Line.Y1" y2="@entry.Line.Y2" />
                <line class="help-line" x1="@(entry.Line.X1)" x2="@(entry.Line.X1)" y1="@(entry.Line.Y1)" y2="@(Options.HeightChart)" />
                @if (CheckWriting(entry.Index))
                {
                    <g>
                        <text class="name" x="@entry.Line.X1" y="@(Options.HeightChart + 20)">@entry.Entry.Name</text>
                        <text class="value" x="@entry.Line.X1" y="@(Options.HeightChart + 40)">@entry.Entry.PostsWritten.ToString("#,0")</text>
                    </g>
                }
            </g>
                }
            </svg>
        }
        else if (Mode.Type == DViewTypes.GraphicAdv)
        {
            <svg height="@Options.Height" viewBox="@($"0 0 {Options.Width} {Options.Height}")">
                <line class="help-line" x1="0" x2="@Options.Width" y1="@(Options.HeightChart)" y2="@(Options.HeightChart)" />
                <g>
                    <path class="activity-line" d="@Graphic.CreatePathAttribute()" />
                </g>
            </svg>
        }
        else if (Mode.Type == DViewTypes.Table)
        {
            <EntriesTable Report="Report" />
        }
        else if (Mode.Type == DViewTypes.Values)
        {
            <EntriesList Report="Report" />
        }
        else
        {
            <p>Что-то</p>
        }

    </div>


</section>


@code {


    [Parameter]
    public ViewType Mode { get; set; } = new ViewType(RumineActivity.View.DViewTypes.Values);
    [Parameter]
    public EventCallback<ViewType> ModeChanged { get; set; }

    private void Set(ViewType mode)
    {
        Mode = mode;
        ModeChanged.InvokeAsync(mode);
    }

    private DiagramSize Options { get; set; } = new DiagramSize();

    private Gistogramm Gistogramm => new Gistogramm(Report, Options);
    private Graphic Graphic => new Graphic(Report, Options);

    private bool CheckWriting(int entryIndex)
    {
        int entriesCount = Report.Length;
        int maxAllowedEntries = 14;
        double everyEntryN = 10;

        return (entriesCount < maxAllowedEntries) || ((entryIndex % (entriesCount / everyEntryN)) < 1);
    }

}

@using static RumineActivity.View.ReportConfigEditor;

@inherits StatComponent

<section class="options">
    <header class="page-header">
        <img alt="Отчет" src="images/settings.svg" />
        <h2>Настройка нового отчета</h2>
    </header>

    <div class="content">

        <section class="dates">
            <section class="options-section">
                <h4 class="options-list-header">Временные рамки:</h4>

                <table class="table-periods">
                    <colgroup>
                        <col style="width: auto;" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                        <col style="width: 7.5%" />
                    </colgroup>
                    <tr>
                        <th>Легенда:</th>
                        <td colspan="3" class="info-cell bordered picked">ЛКМ - выбрать начальный месяц</td>
                        <td colspan="3" class="info-cell bordered picked">ПКМ - выбрать конечный месяц</td>
                        <td colspan="4" class="info-cell picked">Месяца между ними выбираются автоматически</td>
                        <td colspan="2" class="info-cell"></td>
                    </tr>
                    <tr>
                        <th>Год</th>
                        <th colspan="12">Месяцы</th>
                    </tr>
                    @foreach (var yearCells in DateRangePickerAdvanced.Periods.GroupBy(p => p.Year).OrderBy(p => p.Key))
                    {
                        <tr>
                            <td class="year-cell" @onclick="(e) => ProcessCellsPick(yearCells)" title="выделить весь год">@yearCells.Key</td>
                            @foreach (var monthCell in yearCells)
                            {
                                @if(monthCell.DateTo < RumineValues.FoundationDate)
                                {
                                    <td class="month-cell-blocked">
                                        <div class="month-cell-content">

                                        </div>
                                    </td>
                                }
                                else
                                {
                                    <td class="month-cell @CssIsTrue(monthCell.IsIncluded,"picked","not-picked") @CssIsTrue(monthCell.IsBordered,"bordered") @CssIsTrue(monthCell.IsFirstPicked,"first-picked")"
                                        @onclick="(e) => PickFirstCell(e, monthCell)"
                                        @oncontextmenu="e => PickLastCell(e, monthCell)"
                                        @oncontextmenu:preventDefault="true"
                                        title="Выделить этот месяц">
                                        <div class="month-cell-content">
                                            <span class="month-cell-month-title">
                                                @monthCell.Month.GetMonthName("MMM")
                                            </span>
                                            <span class="month-cell-year-title">
                                                @monthCell.DateFrom.ToString("yy")
                                            </span>
                                        </div>
                                    </td>
                                }
                            }
                        </tr>
                    }
                    <tr>
                        <th>Итого</th>
                        <td colspan="8" class="cell-results">
                            <span style="text-align: center">
                                <span>
                                    C
                                </span>
                                <span>
                                    <select id="dateto" @bind="DateRangePickerAdvanced.FirstCell.DayFrom">
                                        @foreach (var optionDay in DateRangePickerAdvanced.FirstCell.GetAvailableDays(false))
                                        {
                                            <option value="@optionDay.day">
                                                @optionDay.text
                                            </option>
                                        }
                                    </select>
                                    @DateRangePickerAdvanced.FirstCell.DateFrom.ToString("MMMM yyyy")
                                </span>
                                <span style="margin-left:4px; margin-right: 4px;">по</span>
                                <span>
                                    <select id="dateto" @bind="DateRangePickerAdvanced.LastCell.DayTo">
                                        @foreach (var optionDay in DateRangePickerAdvanced.LastCell.GetAvailableDays(true))
                                        {
                                            <option value="@optionDay.day">
                                                @optionDay.text
                                            </option>
                                        }
                                    </select>
                                    @DateRangePickerAdvanced.LastCell.DateTo.ToString("MMMM yyyy")
                                </span>
                                <span>
                                    включительно
                                </span>
                            </span>
                        </td>
                        <td class="cell-results all-time" colspan="4" @onclick="PickAllTime">
                            Выделить всё время
                        </td>
                    </tr>
                </table>

            </section>


        </section>

        <section class="options-section">
            <section class="option">
                <h4 class="options-list-header">Деление: </h4>
                <ul>
                    @foreach (var period in EnumValues.PeriodsList)
                    {
                        <li class="@CssIsTrue(ReportConfig.DateRange.IsOkWithPeriod(period), "safe-period", "dangerous-period") @(CssIsSelected(period, ReportConfig.Period))"
                            @onclick="() =>Set(period)">
                            <span>
                                @period.ToString()
                            </span>
                        </li>
                    }
                </ul>
            </section>
        </section>

        <div>
            @if (ReportConfig.IsCorrect())
            {
                <a href="@ReportConfig.GetLinkHref()" class="create-report-button" @onclick="CopyCurrentConfig">
                    <span class="report-title">
                        Создать @ReportConfig.Period.NameReport.ToLower().Replace("ая","ый") отчет за @GetDateReportName()
                    </span>
                    <span class="periods-amount">
                        ~ @EstPeriodsCount.ToString("0") периодов
                    </span>
                </a>
            }
            else
            {
                <a class="create-report-button disabled">
                    <span class="report-title">
                        @ReportConfig.Period.NameReport.Replace("ая","ый") отчет создать не выйдет, мало / много периодов
                    </span>
                    <span class="periods-amount">
                        ~ @EstPeriodsCount.ToString("0") периодов
                    </span>
                </a>
            }
        </div>
    </div>

</section>

@code {
    public ReportConfigEditor ReportConfigEditor => App.ReportConfigEditor;
    public ConfigurationReport ReportConfig => ReportConfigEditor.CurrentConfig;
    public DateRangePickerAdvanced DateRangePickerAdvanced => ReportConfigEditor.DateRangePickerAdvanced;
    public DateRangePickerSimple DateRangePickerSimple => ReportConfigEditor.DateRangePickerSimple;

    private double EstPeriodsCount => ReportConfig.DateRange.GetEntriesCapacityForRange(ReportConfig.Period);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ReportConfigEditor.OnConfigChanged += config => StateHasChanged();
    }

    private void Set(Period period)
    {
        ReportConfig.Period = period;
    }

    private string GetDateReportName()
    {
        return ReportConfig.DateRange.GetName().ToLower();
    }

    private void CopyCurrentConfig()
    {
        ReportConfigEditor.SetNewConfig(new ConfigurationReport(ReportConfig));
    }

    private void ProcessCellsPick(IEnumerable<DateRangeCell> cells)
    {
        DateRangePickerAdvanced.PickCells(cells);
    }
    private void PickFirstCell(MouseEventArgs e, DateRangeCell cell)
    {
        DateRangePickerAdvanced.PickFirstCell(cell);
    }
    private void PickLastCell(MouseEventArgs e, DateRangeCell cell)
    {
        DateRangePickerAdvanced.PickLastCell(cell);
    }
    private void PickAllTime()
    {
        var periodsSorted = DateRangePickerAdvanced.Periods.Where(p => p.DateTo >= RumineValues.FoundationDate).OrderBy(p => p.DateFrom);
        if (!periodsSorted.Any())
        {
            return;
        }

        var first = periodsSorted.First();
        var last = periodsSorted.Last();

        PickFirstCell(new MouseEventArgs(), first);
        PickLastCell(new MouseEventArgs(), last);
    }
}
